# Ultralytics YOLO ðŸš€, AGPL-3.0 license
# RT-DETR-ResNet50 object detection model with P3-P5 outputs.

# Parameters
nc: &nc 80  # number of classes
scales: # model compound scaling constants, i.e. 'model=yolov8n-cls.yaml' will call yolov8-cls.yaml with scale 'n'
  # [depth, width, max_channels]
  l: [1.00, 1.00, 1024]

#---------------------------------------------------------#
# Shared backbone layers

L0: &L0 [-1, 1, ResNetLayer, [3, 64, 1, True, 1]]  # 0
L1: &L1 [-1, 1, ResNetLayer, [64, 64, 1, False, 3]]  # 1
L3: &L2 [-1, 1, ResNetLayer, [256, 128, 2, False, 4]]  # 2
L5: &L5 [-1, 1, ResNetLayer, [1024, 512, 2, False, 3]] # 4

#---------------------------------------------------------#

rtdetr-resnet50:
  backbone:
    # [from, repeats, module, args]
    - *L0
    - *L1
    - *L2
    - [-1, 1, ResNetLayer, [512, 256, 2, False, 6]]  # 3
    - *L5

  neck:
    Y5: &Y5
    - [-1, 1, Conv, [256, 1, 1, None, 1, 1, False]]  # 5
    - [-1, 1, AIFI, [1024, 8]]
    - [-1, 1, Conv, [256, 1, 1]]  # 7
    Y4: &Y4
    - [-1, 1, nn.Upsample, [None, 2, 'nearest']]
    - [3, 1, Conv, [256, 1, 1, None, 1, 1, False]]  # 9
    - [[-2, -1], 1, Concat, [1]]
    - [-1, 3, RepC3, [256]]  # 11
    - [-1, 1, Conv, [256, 1, 1]]  # 12
    X3: &X3
    - [-1, 1, nn.Upsample, [None, 2, 'nearest']]
    - [2, 1, Conv, [256, 1, 1, None, 1, 1, False]]  # 14
    - [[-2, -1], 1, Concat, [1]]  # cat backbone P4
    - [-1, 3, RepC3, [256]]  # X3 (16), fpn_blocks.1
    F4: &F4
    - [-1, 1, Conv, [256, 3, 2]]  # 17, downsample_convs.0
    - [[-1, 12], 1, Concat, [1]]  # cat Y4
    - [-1, 3, RepC3, [256]]  # F4 (19), pan_blocks.0
    F5: &F5
    - [-1, 1, Conv, [256, 3, 2]]  # 20, downsample_convs.1
    - [[-1, 7], 1, Concat, [1]]  # cat Y5
    - [-1, 3, RepC3, [256]]  # F5 (22), pan_blocks.1

  head: &head [[16, 19, 22], 1, RTDETRDecoder, [*nc]]  # Detect(X3, F4, F5)

#---------------------------------------------------------#

rtdetr-resnet101:
  backbone:
    # [from, repeats, module, args]
    - *L0
    - *L1
    - *L2
    - [-1, 1, ResNetLayer, [512, 256, 2, False, 23]]  # 3
    - *L2

  neck:
    Y5: *Y5
    Y4: *Y4
    X3: *X3
    F4: *F4
    F5: *F5

  head: *head  # Detect(X3, F4, F5)

#---------------------------------------------------------#

mappings:
  rtdetr-resnet50: &layout [backbone, [Y5, Y4, X3, F4, F5], head]
  rtdetr-resnet101: *layout